{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Run development server",
      "detail": "Runs Celery, DRF API and the React client in dev mode.",
      "dependsOn": ["Run Celery", "Run API", "Run Client"],
      "presentation": {
        "reveal": "always",
        "revealProblems": "never",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Run API",
      "type": "shell",
      "hide": true,
      "command": "task api:run",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Run Celery",
      "type": "shell",
      "hide": true,
      "command": "task api:run-celery",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Run Client",
      "type": "shell",
      "hide": true,
      "command": "task client:run",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Setup",
      "detail": "Configure the project to be up and running.",
      "type": "shell",
      "dependsOn": ["Install all dependencies"],
      "command": "task client:setup",
      "problemMatcher": []
    },
    {
      "label": "Install all dependencies",
      "detail": "Install npm and python packages.",
      "dependsOn": [
        "API: Install dependencies",
        "Client: Install dependencies"
      ],
      "problemMatcher": []
    },
    {
      "label": "Format all",
      "detail": "Format both API and client code.",
      "dependsOn": ["API: Format", "Client: Format"],
      "problemMatcher": []
    },
    {
      "label": "Lint all",
      "detail": "Lint both API and client code.",
      "dependsOn": ["API: Lint", "Client: Lint"],
      "problemMatcher": []
    },
    {
      "label": "Clean git hooks",
      "detail": "Remove all git hooks.",
      "command": "task clean-hooks",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    // API tasks
    {
      "label": "API: Make DB migrations",
      "detail": "Generate migration files.",
      "type": "shell",
      "hide": false,
      "command": "uv run manage.py makemigrations schoolmarksapi",
      "options": {
        "cwd": "/workspace/api"
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "API: Apply DB migrations",
      "detail": "Apply migration files to the DB.",
      "type": "shell",
      "hide": false,
      "command": "task api:migrate",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "API: Install dependencies",
      "detail": "Install python packages.",
      "type": "shell",
      "command": "task api:install",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "API: Lint",
      "detail": "Lint code with ruff.",
      "type": "shell",
      "command": "task api:lint",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": ["$python"]
    },
    {
      "label": "API: Format",
      "detail": "Format code with ruff.",
      "type": "shell",
      "command": "task api:format",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "API: Clean caches",
      "detail": "Remove all __pycache__ directories.",
      "type": "shell",
      "command": "task clean-api-caches",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    // Front tasks
    {
      "label": "Client: Install dependencies",
      "detail": "Install npm packages.",
      "type": "shell",
      "command": "task client:install",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Client: Generate API client",
      "detail": "Generate OpenAPI schema and typescript-axios client.",
      "type": "shell",
      "command": "task generate-api-client",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Client: Lint",
      "detail": "Lint code with ESLint.",
      "type": "shell",
      "command": "task client:lint",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": ["$eslint-stylish"]
    },
    {
      "label": "Client: Format",
      "detail": "Format code with Prettier.",
      "type": "shell",
      "command": "task client:format",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Client: Test",
      "detail": "Run unit tests.",
      "type": "shell",
      "command": "task client:test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    }
  ]
}
