/* tslint:disable */
/* eslint-disable */
/**
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

export interface ConfigurationParameters {
	apiKey?:
		| string
		| Promise<string>
		| ((name: string) => string)
		| ((name: string) => Promise<string>)
	username?: string
	password?: string
	accessToken?:
		| string
		| Promise<string>
		| ((name?: string, scopes?: string[]) => string)
		| ((name?: string, scopes?: string[]) => Promise<string>)
	basePath?: string
	serverIndex?: number
	baseOptions?: any
	formDataCtor?: new () => any
}

export class Configuration {
	/**
	 * parameter for apiKey security
	 *
	 * @memberof Configuration
	 * @param name security name
	 */
	apiKey?:
		| string
		| Promise<string>
		| ((name: string) => string)
		| ((name: string) => Promise<string>)
	/**
	 * parameter for basic security
	 *
	 * @memberof Configuration
	 * @type {string}
	 */
	username?: string
	/**
	 * parameter for basic security
	 *
	 * @memberof Configuration
	 * @type {string}
	 */
	password?: string
	/**
	 * parameter for oauth2 security
	 *
	 * @memberof Configuration
	 * @param name security name
	 * @param scopes oauth2 scope
	 */
	accessToken?:
		| string
		| Promise<string>
		| ((name?: string, scopes?: string[]) => string)
		| ((name?: string, scopes?: string[]) => Promise<string>)
	/**
	 * override base path
	 *
	 * @memberof Configuration
	 * @type {string}
	 */
	basePath?: string
	/**
	 * override server index
	 *
	 * @memberof Configuration
	 * @type {number}
	 */
	serverIndex?: number
	/**
	 * base options for axios calls
	 *
	 * @memberof Configuration
	 * @type {any}
	 */
	baseOptions?: any
	/**
	 * The FormData constructor that will be used to create multipart form data
	 * requests. You can inject this here so that execution environments that do
	 * not support the FormData class can still run the generated client.
	 *
	 * @type {new () => FormData}
	 */
	formDataCtor?: new () => any

	constructor(param: ConfigurationParameters = {}) {
		this.apiKey = param.apiKey
		this.username = param.username
		this.password = param.password
		this.accessToken = param.accessToken
		this.basePath = param.basePath
		this.serverIndex = param.serverIndex
		this.baseOptions = {
			...param.baseOptions,
			headers: {
				...param.baseOptions?.headers,
			},
		}
		this.formDataCtor = param.formDataCtor
	}

	/**
	 * Check if the given MIME is a JSON MIME. JSON MIME examples:
	 * application/json application/json; charset=UTF8 APPLICATION/JSON
	 * application/vnd.company+json
	 *
	 * @param mime - MIME (Multipurpose Internet Mail Extensions)
	 * @returns True if the given MIME is JSON, false otherwise.
	 */
	public isJsonMime(mime: string): boolean {
		const jsonMime: RegExp = new RegExp(
			'^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$',
			'i',
		)
		return (
			mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json')
		)
	}
}
